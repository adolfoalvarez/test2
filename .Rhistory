hello <- function(x="Analyx") {
print(paste0("Hello, ", x)
}
hello <- function(x="Analyx"){
print(paste0("Hello, ", x))
}
hello <- function(x="Analyx") {
print(paste0("Hello, ", x))
}
hello()
hello("Adolfo")
hello("Kasia")
hello()
help(person)
person("Adolfo", "Alvarez", email="adolfo.alvarez@analyx.com", role=c("aut", "cre"))
library(magrittr)
x <- "Analyx"
x %>% paste0("Hello", .)
x %>% paste0("Hello ", .)
x %>% paste0("Hello ", .) %>% print()
hello <- function(x="Analyx") {
x %>% paste0("Hello ", .) %>% print()
}
hello()
hello("Adolfo")
158/231
library(test2)
library(test2)
hello()
hello("Adolfo")
a <- hello()
a
library(test2)
hello()
hello("Adolfo")
hello("Adolfo", formal=F)
hello("Adolfo", formal=FALSE)
hello <- function(x="Analyx", formal = TRUE) {
if(formal){
x %>% paste0("Hello ", .) %>% print()
} else {
x %>% paste0("Hi ", .) %>% print()
}
}
hello("Adolfo", formal=FALSE)
library(test2)
library(test2)
hello()
hello("Adolfo", formal=FALSE)
2 %>% '+'(2)
'+'(2,2)
library(test2)
hello()
?hello
library(test2)
library(test2)
help(test2)
library(test2)
library(test2)
help(hello)
help(hello2)
devtools::use_vignette("my-vignette")
vignette("my-vignette")
library(test2)
vignette("my-vignette")
vignette()
library(test2)
devtools::build()
library(test2)
vignette()
library(test2)
vignette()
help(vignette)
vignette(all=FALSE)
vignette(test2)
devtools::install()
vignette(all=FALSE)
vignette()
library(test2)
vignette()
search()
devtools::build()
library(test2)
vignettes()
vignette()
library(test2)
library(test2)
library(test2)
help(test2)
2 %>% '+'(2)
hello2
library(test2)
library(test2)
library(test2)
devtools::build()
library(test2)
library(test2)
hello()
hello2()
bye()
?hello2
hello2("Analyx", formal = F, bye=T)
help(devtools::use_data)
help(use_data)
x <- sample(1000)
devtools::use_data(x, internal = TRUE)
data(x)
devtools::use_testthat()
test_check("test2")
library(testthat)
library(test2)
test_check("test2")
hell()
hello()
library(test2)
test_check("test2")
devtools::test()
library(test2)
devtools::test()
expect_equal(hello(),"Hello Analyx")
hello()
"Hello Analyx"
test_that("default",{
expect_equal(hello(),"Bye Analyx")
})
test_that("default",{
expect_equal(hello(),"Hello Analyx"),
expect_equal(hello("Analyx", bye=T), "bye Analyx")
})
devtools::test()
library(test2)
devtools::test()
devtools::test()
?hello
?hello2
?hello
help(hello)
library(test2)
help(hello)
help(hello2)
help(bye)
?(bye)
?bye
?hello2
?hello
